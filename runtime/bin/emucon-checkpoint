#!/bin/sh

__cmd_name=$(basename $0)


# ========== Helper Functions ==========

__print_usage()
{
	cat <<- EOT
	USAGE:
	    ${__cmd_name} [options] -d <path> -o <path> <container-id>

	DESCRIPTION:
	    Dumps the state of a running runc-container into a tar archive.

	ARGUMENTS:
	    <container-id>
	        ID of the container to dump.

	OPTIONS:
	    -d, --image-dir <path>
	        Directory for image files.

	    -w, --working-dir <path>
	        Working directory for CRIU.

	    -o, --output <path>
	        Path for the generated checkpoint archive.

	    -i, --include <path>
	        Include specified file or directory into the checkpoint archive.

	    -r, --leave-running
	        Leave the container running after dump.

	    --non-interactive
	        Avoid prompting the user for password when executing privileged commands.
	        For this to work, sudo must be configured accordingly (see README).

	EOT
}


# ========== Script's Begin ==========

. emucon-init.sh

if [ $# -eq 0 ]; then
	__print_usage
	emucon_exit
fi

# Check external dependencies
emucon_ensure_is_installed 'runc'
emucon_ensure_is_installed 'criu'

# Parse script's command line arguments
shortopts='d:w:o:i:rh'
longopts='image-dir:,working-dir:,output:,include:,leave-running,non-interactive,help'
cmdargs=$(emucon_parse_cmdargs -s "${shortopts}" -l "${longopts}" -- "$@")
if emucon_cmd_failed ; then
	emucon_abort
fi

# runc arguments
runcargs='--shell-job --file-locks --ext-unix-sk'

# Lookup parsed parameters and their arguments
eval set -- ${cmdargs}
while true ; do
	case "$1" in
		-d|--image-dir)
			imgdir="$2"
			shift 2 ;;
		-w|--working-dir)
			workdir="$2"
			shift 2 ;;
		-o|--output)
			output="$2"
			shift 2 ;;
		-i|--include)
			includes="${includes} $2"
			shift 2 ;;
		-r|--leave-running)
			runcargs="${runcargs} --leave-running"
			shift 1 ;;
		--non-interactive)
			interactive='n'
			shift 1 ;;
		-h|--help)
			__print_usage
			emucon_exit ;;
		--)
			shift
			break ;;
		*)
			emucon_print_invalid_cmdargs_error "${cmdargs}"
			emucon_abort -v ;;
	esac
done

# Container's ID
cid="$1"

# Check required parameters
emucon_check_required_arg '-d/--image-dir' "${imgdir}"
emucon_check_required_arg '<container-id>' "${cid}"

# Check directories
emucon_ensure_dir_exists "${imgdir}"
if [ -n "${workdir}" ] ; then
	emucon_ensure_dir_exists "${workdir}"
else
	workdir="${imgdir}"
fi

# Interactive mode
if [ "${interactive:=y}" = 'y' ] ; then
	emucon_print_info 'Running in interactive mode...'
else
	emucon_print_info 'Running in non-interactive mode...'
	sopts='--non-interactive'
fi

__cleanup()
{
	# Save current exit-code
	exitcode="$?"

	emucon_print_info "Cleaning up..."
	rm -r "${imgdir}"

	exit "${exitcode}"
}

# Setup an exit-trap
trap __cleanup EXIT

readonly user=$(id --user --name)
readonly group=$(id --group --name)

emucon_print_info "Dumping container ${cid}..."
runcopts="${runcargs} --image-path ${imgdir} --work-path ${workdir}"
if ! sudo ${sopts} -- runc --debug checkpoint ${runcopts} "${cid}" ; then
	sudo ${sopts} -- chown --recursive "${user}:${group}" "${imgdir}"
	cat "${imgdir}/dump.log"
	emucon_abort -v
fi

emucon_print_info "Post-processing dump-images..."
sudo ${sopts} -- chown --recursive "${user}:${group}" "${imgdir}" || emucon_abort -v

emucon_print_info "Creating checkpoint archive..."
taropts="--create --auto-compress --totals --file ${output}"
echo tar ${taropts} "${imgdir}" ${includes}
tar ${taropts} "${imgdir}" ${includes} || emucon_abort -v
emucon_print_info "Checkpoint created at ${output}"

